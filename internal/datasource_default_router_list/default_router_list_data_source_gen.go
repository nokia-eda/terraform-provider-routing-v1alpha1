// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_default_router_list

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func DefaultRouterListDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Computed: true,
			},
			"fields": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
				MarkdownDescription: "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
			},
			"filter": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "an EQL \"where\" expression that will be used to filter the set of resources returned.",
				MarkdownDescription: "an EQL \"where\" expression that will be used to filter the set of resources returned.",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"api_version": schema.StringAttribute{
							Computed: true,
						},
						"kind": schema.StringAttribute{
							Computed: true,
						},
						"metadata": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"annotations": schema.MapAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"labels": schema.MapAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"namespace": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: MetadataType{
								ObjectType: types.ObjectType{
									AttrTypes: MetadataValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"spec": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"bgp": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"autonomous_system": schema.Int64Attribute{
											Optional:            true,
											Description:         "Autonomous System number for BGP.",
											MarkdownDescription: "Autonomous System number for BGP.",
										},
										"ebgp_preference": schema.Int64Attribute{
											Optional:            true,
											Description:         "Preference to be set for eBGP.",
											MarkdownDescription: "Preference to be set for eBGP.",
										},
										"enabled": schema.BoolAttribute{
											Optional:            true,
											Description:         "Enables BGP in the default VRF.",
											MarkdownDescription: "Enables BGP in the default VRF.",
										},
										"ibgp_preference": schema.Int64Attribute{
											Optional:            true,
											Description:         "Preference to be set for iBGP.",
											MarkdownDescription: "Preference to be set for iBGP.",
										},
										"ipv4_unicast": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{
												"advertise_ipv6_next_hops": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables advertisement of IPv4 Unicast routes with IPv6 next-hops to peers.",
													MarkdownDescription: "Enables advertisement of IPv4 Unicast routes with IPv6 next-hops to peers.",
												},
												"enabled": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables the IPv4 unicast AFISAFI.",
													MarkdownDescription: "Enables the IPv4 unicast AFISAFI.",
												},
												"multipath": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{
														"allow_multiple_as": schema.BoolAttribute{
															Optional:            true,
															Description:         "When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH), When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path.",
															MarkdownDescription: "When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH), When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path.",
														},
														"max_allowed_paths": schema.Int64Attribute{
															Optional:            true,
															Description:         "The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context.",
															MarkdownDescription: "The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context.",
														},
													},
													CustomType: MultipathType{
														ObjectType: types.ObjectType{
															AttrTypes: MultipathValue{}.AttributeTypes(ctx),
														},
													},
													Optional:            true,
													Description:         "Enable multipath.",
													MarkdownDescription: "Enable multipath.",
												},
												"rapid_update": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables rapid update.",
													MarkdownDescription: "Enables rapid update.",
												},
												"receive_ipv6_next_hops": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables the advertisement of the RFC 5549 capability to receive IPv4 routes with IPv6 next-hops.",
													MarkdownDescription: "Enables the advertisement of the RFC 5549 capability to receive IPv4 routes with IPv6 next-hops.",
												},
											},
											CustomType: Ipv4UnicastType{
												ObjectType: types.ObjectType{
													AttrTypes: Ipv4UnicastValue{}.AttributeTypes(ctx),
												},
											},
											Optional:            true,
											Description:         "Parameters relating to the IPv4 unicast AFI/SAFI.",
											MarkdownDescription: "Parameters relating to the IPv4 unicast AFI/SAFI.",
										},
										"ipv6_unicast": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{
												"enabled": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables the IPv6 unicast AFISAFI",
													MarkdownDescription: "Enables the IPv6 unicast AFISAFI",
												},
												"multipath": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{
														"allow_multiple_as": schema.BoolAttribute{
															Optional:            true,
															Description:         "When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH), When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path.",
															MarkdownDescription: "When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH), When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path.",
														},
														"max_allowed_paths": schema.Int64Attribute{
															Optional:            true,
															Description:         "The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context.",
															MarkdownDescription: "The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context.",
														},
													},
													CustomType: Multipath1Type{
														ObjectType: types.ObjectType{
															AttrTypes: Multipath1Value{}.AttributeTypes(ctx),
														},
													},
													Optional:            true,
													Description:         "Enable multipath",
													MarkdownDescription: "Enable multipath",
												},
												"rapid_update": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables rapid update.",
													MarkdownDescription: "Enables rapid update.",
												},
											},
											CustomType: Ipv6UnicastType{
												ObjectType: types.ObjectType{
													AttrTypes: Ipv6UnicastValue{}.AttributeTypes(ctx),
												},
											},
											Optional:            true,
											Description:         "Parameters relating to the IPv6 unicast AFI/SAFI.",
											MarkdownDescription: "Parameters relating to the IPv6 unicast AFI/SAFI.",
										},
										"keychain": schema.StringAttribute{
											Optional:            true,
											Description:         "Keychain to be used for authentication",
											MarkdownDescription: "Keychain to be used for authentication",
										},
										"l2_vpn_evpn": schema.SingleNestedAttribute{
											Attributes: map[string]schema.Attribute{
												"advertise_ipv6_next_hops": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables advertisement of EVPN routes with IPv6 next-hops to peers.",
													MarkdownDescription: "Enables advertisement of EVPN routes with IPv6 next-hops to peers.",
												},
												"enabled": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables the L2VPN EVPN AFISAFI.",
													MarkdownDescription: "Enables the L2VPN EVPN AFISAFI.",
												},
												"inter_asvpn": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enable inter-AS VPN for EVPN.",
													MarkdownDescription: "Enable inter-AS VPN for EVPN.",
												},
												"multipath": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{
														"allow_multiple_as": schema.BoolAttribute{
															Optional:            true,
															Description:         "When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH), When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path.",
															MarkdownDescription: "When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH), When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path.",
														},
														"max_allowed_paths": schema.Int64Attribute{
															Optional:            true,
															Description:         "The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context.",
															MarkdownDescription: "The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context.",
														},
													},
													CustomType: Multipath2Type{
														ObjectType: types.ObjectType{
															AttrTypes: Multipath2Value{}.AttributeTypes(ctx),
														},
													},
													Optional:            true,
													Description:         "Enable multipath",
													MarkdownDescription: "Enable multipath",
												},
												"rapid_update": schema.BoolAttribute{
													Optional:            true,
													Description:         "Enables rapid update.",
													MarkdownDescription: "Enables rapid update.",
												},
											},
											CustomType: L2VpnEvpnType{
												ObjectType: types.ObjectType{
													AttrTypes: L2VpnEvpnValue{}.AttributeTypes(ctx),
												},
											},
											Optional:            true,
											Description:         "Parameters relating to the EVPN AFI/SAFI.",
											MarkdownDescription: "Parameters relating to the EVPN AFI/SAFI.",
										},
										"min_wait_to_advertise": schema.Int64Attribute{
											Optional:            true,
											Description:         "Minimum wait time before advertising routes post BGP restart.",
											MarkdownDescription: "Minimum wait time before advertising routes post BGP restart.",
										},
										"rapid_withdrawl": schema.BoolAttribute{
											Optional:            true,
											Description:         "Enable rapid withdrawal in BGP.",
											MarkdownDescription: "Enable rapid withdrawal in BGP.",
										},
										"send_community_large": schema.BoolAttribute{
											Optional:            true,
											Description:         "When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
											MarkdownDescription: "When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
										},
										"send_community_standard": schema.BoolAttribute{
											Optional:            true,
											Description:         "When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
											MarkdownDescription: "When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
										},
										"wait_for_fib_install": schema.BoolAttribute{
											Optional:            true,
											Description:         "Wait for FIB installation before advertising routes.",
											MarkdownDescription: "Wait for FIB installation before advertising routes.",
										},
									},
									CustomType: BgpType{
										ObjectType: types.ObjectType{
											AttrTypes: BgpValue{}.AttributeTypes(ctx),
										},
									},
									Optional:            true,
									Description:         "BGP configuration.",
									MarkdownDescription: "BGP configuration.",
								},
								"description": schema.StringAttribute{
									Optional:            true,
									Description:         "Sets the description on the Default router.",
									MarkdownDescription: "Sets the description on the Default router.",
								},
								"export_policy": schema.ListAttribute{
									ElementType:         types.StringType,
									Optional:            true,
									Description:         "Reference to a Policy resource to use when evaluating route exports from the DefaultRouter.",
									MarkdownDescription: "Reference to a Policy resource to use when evaluating route exports from the DefaultRouter.",
								},
								"import_policy": schema.ListAttribute{
									ElementType:         types.StringType,
									Optional:            true,
									Description:         "Reference to a Policy resource to use when evaluating route imports into the DefaultRouter.",
									MarkdownDescription: "Reference to a Policy resource to use when evaluating route imports into the DefaultRouter.",
								},
								"node": schema.StringAttribute{
									Optional:            true,
									Description:         "Reference to a TopoNode on which to configure the default routing instance.",
									MarkdownDescription: "Reference to a TopoNode on which to configure the default routing instance.",
								},
								"route_leaking": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"export_policy": schema.StringAttribute{
											Optional:            true,
											Description:         "Reference to a Policy resource to use when evaluating route exports from the DefaultRouter.",
											MarkdownDescription: "Reference to a Policy resource to use when evaluating route exports from the DefaultRouter.",
										},
										"import_policy": schema.StringAttribute{
											Optional:            true,
											Description:         "Reference to a Policy resource to use when evaluating route imports into the DefaultRouter.",
											MarkdownDescription: "Reference to a Policy resource to use when evaluating route imports into the DefaultRouter.",
										},
									},
									CustomType: RouteLeakingType{
										ObjectType: types.ObjectType{
											AttrTypes: RouteLeakingValue{}.AttributeTypes(ctx),
										},
									},
									Optional:            true,
									Description:         "Route leaking controlled by routing policies in and out of the DefaultRouter.",
									MarkdownDescription: "Route leaking controlled by routing policies in and out of the DefaultRouter.",
								},
								"router_id": schema.StringAttribute{
									Optional:            true,
									Description:         "Router ID in dotted quad notation.",
									MarkdownDescription: "Router ID in dotted quad notation.",
								},
							},
							CustomType: SpecType{
								ObjectType: types.ObjectType{
									AttrTypes: SpecValue{}.AttributeTypes(ctx),
								},
							},
							Optional:            true,
							Description:         "DefaultRouter enables the configuration of default routing instances on a specified Node, including options for BGP configuration, import and export policies, and router IDs.",
							MarkdownDescription: "DefaultRouter enables the configuration of default routing instances on a specified Node, including options for BGP configuration, import and export policies, and router IDs.",
						},
						"status": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"health": schema.Int64Attribute{
									Computed:            true,
									Description:         "Indicates the health score of the Router.",
									MarkdownDescription: "Indicates the health score of the Router.",
								},
								"health_score_reason": schema.StringAttribute{
									Computed:            true,
									Description:         "Indicates the reason for the health score.",
									MarkdownDescription: "Indicates the reason for the health score.",
								},
								"last_change": schema.StringAttribute{
									Computed:            true,
									Description:         "The time when the state of the resource last changed.",
									MarkdownDescription: "The time when the state of the resource last changed.",
								},
								"operational_state": schema.StringAttribute{
									Computed:            true,
									Description:         "Operational state of the Router.",
									MarkdownDescription: "Operational state of the Router.",
								},
							},
							CustomType: StatusType{
								ObjectType: types.ObjectType{
									AttrTypes: StatusValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "DefaultRouterStatus defines the observed state of DefaultRouter",
							MarkdownDescription: "DefaultRouterStatus defines the observed state of DefaultRouter",
						},
					},
					CustomType: ItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: ItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"label_selector": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "a label selector string to filter the results based on CR labels",
				MarkdownDescription: "a label selector string to filter the results based on CR labels",
			},
			"namespace": schema.StringAttribute{
				Required:            true,
				Description:         "the namespace scope in which to operate",
				MarkdownDescription: "the namespace scope in which to operate",
			},
		},
	}
}

type DefaultRouterListModel struct {
	ApiVersion    types.String `tfsdk:"api_version"`
	Fields        types.String `tfsdk:"fields"`
	Filter        types.String `tfsdk:"filter"`
	Items         types.List   `tfsdk:"items"`
	Kind          types.String `tfsdk:"kind"`
	LabelSelector types.String `tfsdk:"label_selector"`
	Namespace     types.String `tfsdk:"namespace"`
}

var _ basetypes.ObjectTypable = ItemsType{}

type ItemsType struct {
	basetypes.ObjectType
}

func (t ItemsType) Equal(o attr.Type) bool {
	other, ok := o.(ItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ItemsType) String() string {
	return "ItemsType"
}

func (t ItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiVersionAttribute, ok := attributes["api_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_version is missing from object`)

		return nil, diags
	}

	apiVersionVal, ok := apiVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_version expected to be basetypes.StringValue, was: %T`, apiVersionAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return nil, diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return nil, diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ObjectValue, was: %T`, metadataAttribute))
	}

	specAttribute, ok := attributes["spec"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`spec is missing from object`)

		return nil, diags
	}

	specVal, ok := specAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`spec expected to be basetypes.ObjectValue, was: %T`, specAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.ObjectValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ItemsValue{
		ApiVersion: apiVersionVal,
		Kind:       kindVal,
		Metadata:   metadataVal,
		Spec:       specVal,
		Status:     statusVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewItemsValueNull() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewItemsValueUnknown() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ItemsValue Attribute Value",
				"While creating a ItemsValue value, a missing attribute value was detected. "+
					"A ItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ItemsValue Attribute Type",
				"While creating a ItemsValue value, an invalid attribute value was detected. "+
					"A ItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ItemsValue Attribute Value",
				"While creating a ItemsValue value, an extra attribute value was detected. "+
					"A ItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	apiVersionAttribute, ok := attributes["api_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_version is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	apiVersionVal, ok := apiVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_version expected to be basetypes.StringValue, was: %T`, apiVersionAttribute))
	}

	kindAttribute, ok := attributes["kind"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kind is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	kindVal, ok := kindAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kind expected to be basetypes.StringValue, was: %T`, kindAttribute))
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ObjectValue, was: %T`, metadataAttribute))
	}

	specAttribute, ok := attributes["spec"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`spec is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	specVal, ok := specAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`spec expected to be basetypes.ObjectValue, was: %T`, specAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.ObjectValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	return ItemsValue{
		ApiVersion: apiVersionVal,
		Kind:       kindVal,
		Metadata:   metadataVal,
		Spec:       specVal,
		Status:     statusVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ItemsValue {
	object, diags := NewItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewItemsValueMust(ItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ItemsType) ValueType(ctx context.Context) attr.Value {
	return ItemsValue{}
}

var _ basetypes.ObjectValuable = ItemsValue{}

type ItemsValue struct {
	ApiVersion basetypes.StringValue `tfsdk:"api_version"`
	Kind       basetypes.StringValue `tfsdk:"kind"`
	Metadata   basetypes.ObjectValue `tfsdk:"metadata"`
	Spec       basetypes.ObjectValue `tfsdk:"spec"`
	Status     basetypes.ObjectValue `tfsdk:"status"`
	state      attr.ValueState
}

func (v ItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["api_version"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kind"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["metadata"] = basetypes.ObjectType{
		AttrTypes: MetadataValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["spec"] = basetypes.ObjectType{
		AttrTypes: SpecValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["status"] = basetypes.ObjectType{
		AttrTypes: StatusValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.ApiVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_version"] = val

		val, err = v.Kind.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kind"] = val

		val, err = v.Metadata.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metadata"] = val

		val, err = v.Spec.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["spec"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ItemsValue) String() string {
	return "ItemsValue"
}

func (v ItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var metadata basetypes.ObjectValue

	if v.Metadata.IsNull() {
		metadata = types.ObjectNull(
			MetadataValue{}.AttributeTypes(ctx),
		)
	}

	if v.Metadata.IsUnknown() {
		metadata = types.ObjectUnknown(
			MetadataValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Metadata.IsNull() && !v.Metadata.IsUnknown() {
		metadata = types.ObjectValueMust(
			MetadataValue{}.AttributeTypes(ctx),
			v.Metadata.Attributes(),
		)
	}

	var spec basetypes.ObjectValue

	if v.Spec.IsNull() {
		spec = types.ObjectNull(
			SpecValue{}.AttributeTypes(ctx),
		)
	}

	if v.Spec.IsUnknown() {
		spec = types.ObjectUnknown(
			SpecValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Spec.IsNull() && !v.Spec.IsUnknown() {
		spec = types.ObjectValueMust(
			SpecValue{}.AttributeTypes(ctx),
			v.Spec.Attributes(),
		)
	}

	var status basetypes.ObjectValue

	if v.Status.IsNull() {
		status = types.ObjectNull(
			StatusValue{}.AttributeTypes(ctx),
		)
	}

	if v.Status.IsUnknown() {
		status = types.ObjectUnknown(
			StatusValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Status.IsNull() && !v.Status.IsUnknown() {
		status = types.ObjectValueMust(
			StatusValue{}.AttributeTypes(ctx),
			v.Status.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"api_version": basetypes.StringType{},
		"kind":        basetypes.StringType{},
		"metadata": basetypes.ObjectType{
			AttrTypes: MetadataValue{}.AttributeTypes(ctx),
		},
		"spec": basetypes.ObjectType{
			AttrTypes: SpecValue{}.AttributeTypes(ctx),
		},
		"status": basetypes.ObjectType{
			AttrTypes: StatusValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api_version": v.ApiVersion,
			"kind":        v.Kind,
			"metadata":    metadata,
			"spec":        spec,
			"status":      status,
		})

	return objVal, diags
}

func (v ItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(ItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiVersion.Equal(other.ApiVersion) {
		return false
	}

	if !v.Kind.Equal(other.Kind) {
		return false
	}

	if !v.Metadata.Equal(other.Metadata) {
		return false
	}

	if !v.Spec.Equal(other.Spec) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	return true
}

func (v ItemsValue) Type(ctx context.Context) attr.Type {
	return ItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_version": basetypes.StringType{},
		"kind":        basetypes.StringType{},
		"metadata": basetypes.ObjectType{
			AttrTypes: MetadataValue{}.AttributeTypes(ctx),
		},
		"spec": basetypes.ObjectType{
			AttrTypes: SpecValue{}.AttributeTypes(ctx),
		},
		"status": basetypes.ObjectType{
			AttrTypes: StatusValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return nil, diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return nil, diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		Namespace:   namespaceVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	namespaceAttribute, ok := attributes["namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`namespace is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	namespaceVal, ok := namespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`namespace expected to be basetypes.StringValue, was: %T`, namespaceAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		Namespace:   namespaceVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Annotations basetypes.MapValue    `tfsdk:"annotations"`
	Labels      basetypes.MapValue    `tfsdk:"labels"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Namespace   basetypes.StringValue `tfsdk:"namespace"`
	state       attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["annotations"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["labels"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["namespace"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.Labels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["labels"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Namespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["namespace"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var annotationsVal basetypes.MapValue
	switch {
	case v.Annotations.IsUnknown():
		annotationsVal = types.MapUnknown(types.StringType)
	case v.Annotations.IsNull():
		annotationsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		annotationsVal, d = types.MapValue(types.StringType, v.Annotations.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name":      basetypes.StringType{},
			"namespace": basetypes.StringType{},
		}), diags
	}

	var labelsVal basetypes.MapValue
	switch {
	case v.Labels.IsUnknown():
		labelsVal = types.MapUnknown(types.StringType)
	case v.Labels.IsNull():
		labelsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelsVal, d = types.MapValue(types.StringType, v.Labels.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name":      basetypes.StringType{},
			"namespace": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"annotations": annotationsVal,
			"labels":      labelsVal,
			"name":        v.Name,
			"namespace":   v.Namespace,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.Labels.Equal(other.Labels) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Namespace.Equal(other.Namespace) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name":      basetypes.StringType{},
		"namespace": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bgpAttribute, ok := attributes["bgp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bgp is missing from object`)

		return nil, diags
	}

	bgpVal, ok := bgpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bgp expected to be basetypes.ObjectValue, was: %T`, bgpAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	exportPolicyAttribute, ok := attributes["export_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`export_policy is missing from object`)

		return nil, diags
	}

	exportPolicyVal, ok := exportPolicyAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`export_policy expected to be basetypes.ListValue, was: %T`, exportPolicyAttribute))
	}

	importPolicyAttribute, ok := attributes["import_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`import_policy is missing from object`)

		return nil, diags
	}

	importPolicyVal, ok := importPolicyAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`import_policy expected to be basetypes.ListValue, was: %T`, importPolicyAttribute))
	}

	nodeAttribute, ok := attributes["node"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node is missing from object`)

		return nil, diags
	}

	nodeVal, ok := nodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node expected to be basetypes.StringValue, was: %T`, nodeAttribute))
	}

	routeLeakingAttribute, ok := attributes["route_leaking"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_leaking is missing from object`)

		return nil, diags
	}

	routeLeakingVal, ok := routeLeakingAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_leaking expected to be basetypes.ObjectValue, was: %T`, routeLeakingAttribute))
	}

	routerIdAttribute, ok := attributes["router_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`router_id is missing from object`)

		return nil, diags
	}

	routerIdVal, ok := routerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`router_id expected to be basetypes.StringValue, was: %T`, routerIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Bgp:          bgpVal,
		Description:  descriptionVal,
		ExportPolicy: exportPolicyVal,
		ImportPolicy: importPolicyVal,
		Node:         nodeVal,
		RouteLeaking: routeLeakingVal,
		RouterId:     routerIdVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	bgpAttribute, ok := attributes["bgp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bgp is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	bgpVal, ok := bgpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bgp expected to be basetypes.ObjectValue, was: %T`, bgpAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	exportPolicyAttribute, ok := attributes["export_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`export_policy is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	exportPolicyVal, ok := exportPolicyAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`export_policy expected to be basetypes.ListValue, was: %T`, exportPolicyAttribute))
	}

	importPolicyAttribute, ok := attributes["import_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`import_policy is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	importPolicyVal, ok := importPolicyAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`import_policy expected to be basetypes.ListValue, was: %T`, importPolicyAttribute))
	}

	nodeAttribute, ok := attributes["node"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	nodeVal, ok := nodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node expected to be basetypes.StringValue, was: %T`, nodeAttribute))
	}

	routeLeakingAttribute, ok := attributes["route_leaking"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_leaking is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	routeLeakingVal, ok := routeLeakingAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_leaking expected to be basetypes.ObjectValue, was: %T`, routeLeakingAttribute))
	}

	routerIdAttribute, ok := attributes["router_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`router_id is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	routerIdVal, ok := routerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`router_id expected to be basetypes.StringValue, was: %T`, routerIdAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Bgp:          bgpVal,
		Description:  descriptionVal,
		ExportPolicy: exportPolicyVal,
		ImportPolicy: importPolicyVal,
		Node:         nodeVal,
		RouteLeaking: routeLeakingVal,
		RouterId:     routerIdVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Bgp          basetypes.ObjectValue `tfsdk:"bgp"`
	Description  basetypes.StringValue `tfsdk:"description"`
	ExportPolicy basetypes.ListValue   `tfsdk:"export_policy"`
	ImportPolicy basetypes.ListValue   `tfsdk:"import_policy"`
	Node         basetypes.StringValue `tfsdk:"node"`
	RouteLeaking basetypes.ObjectValue `tfsdk:"route_leaking"`
	RouterId     basetypes.StringValue `tfsdk:"router_id"`
	state        attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["bgp"] = basetypes.ObjectType{
		AttrTypes: BgpValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["export_policy"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["import_policy"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["node"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_leaking"] = basetypes.ObjectType{
		AttrTypes: RouteLeakingValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["router_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Bgp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bgp"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.ExportPolicy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["export_policy"] = val

		val, err = v.ImportPolicy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["import_policy"] = val

		val, err = v.Node.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["node"] = val

		val, err = v.RouteLeaking.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_leaking"] = val

		val, err = v.RouterId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["router_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var bgp basetypes.ObjectValue

	if v.Bgp.IsNull() {
		bgp = types.ObjectNull(
			BgpValue{}.AttributeTypes(ctx),
		)
	}

	if v.Bgp.IsUnknown() {
		bgp = types.ObjectUnknown(
			BgpValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Bgp.IsNull() && !v.Bgp.IsUnknown() {
		bgp = types.ObjectValueMust(
			BgpValue{}.AttributeTypes(ctx),
			v.Bgp.Attributes(),
		)
	}

	var routeLeaking basetypes.ObjectValue

	if v.RouteLeaking.IsNull() {
		routeLeaking = types.ObjectNull(
			RouteLeakingValue{}.AttributeTypes(ctx),
		)
	}

	if v.RouteLeaking.IsUnknown() {
		routeLeaking = types.ObjectUnknown(
			RouteLeakingValue{}.AttributeTypes(ctx),
		)
	}

	if !v.RouteLeaking.IsNull() && !v.RouteLeaking.IsUnknown() {
		routeLeaking = types.ObjectValueMust(
			RouteLeakingValue{}.AttributeTypes(ctx),
			v.RouteLeaking.Attributes(),
		)
	}

	var exportPolicyVal basetypes.ListValue
	switch {
	case v.ExportPolicy.IsUnknown():
		exportPolicyVal = types.ListUnknown(types.StringType)
	case v.ExportPolicy.IsNull():
		exportPolicyVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		exportPolicyVal, d = types.ListValue(types.StringType, v.ExportPolicy.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"bgp": basetypes.ObjectType{
				AttrTypes: BgpValue{}.AttributeTypes(ctx),
			},
			"description": basetypes.StringType{},
			"export_policy": basetypes.ListType{
				ElemType: types.StringType,
			},
			"import_policy": basetypes.ListType{
				ElemType: types.StringType,
			},
			"node": basetypes.StringType{},
			"route_leaking": basetypes.ObjectType{
				AttrTypes: RouteLeakingValue{}.AttributeTypes(ctx),
			},
			"router_id": basetypes.StringType{},
		}), diags
	}

	var importPolicyVal basetypes.ListValue
	switch {
	case v.ImportPolicy.IsUnknown():
		importPolicyVal = types.ListUnknown(types.StringType)
	case v.ImportPolicy.IsNull():
		importPolicyVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		importPolicyVal, d = types.ListValue(types.StringType, v.ImportPolicy.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"bgp": basetypes.ObjectType{
				AttrTypes: BgpValue{}.AttributeTypes(ctx),
			},
			"description": basetypes.StringType{},
			"export_policy": basetypes.ListType{
				ElemType: types.StringType,
			},
			"import_policy": basetypes.ListType{
				ElemType: types.StringType,
			},
			"node": basetypes.StringType{},
			"route_leaking": basetypes.ObjectType{
				AttrTypes: RouteLeakingValue{}.AttributeTypes(ctx),
			},
			"router_id": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"bgp": basetypes.ObjectType{
			AttrTypes: BgpValue{}.AttributeTypes(ctx),
		},
		"description": basetypes.StringType{},
		"export_policy": basetypes.ListType{
			ElemType: types.StringType,
		},
		"import_policy": basetypes.ListType{
			ElemType: types.StringType,
		},
		"node": basetypes.StringType{},
		"route_leaking": basetypes.ObjectType{
			AttrTypes: RouteLeakingValue{}.AttributeTypes(ctx),
		},
		"router_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"bgp":           bgp,
			"description":   v.Description,
			"export_policy": exportPolicyVal,
			"import_policy": importPolicyVal,
			"node":          v.Node,
			"route_leaking": routeLeaking,
			"router_id":     v.RouterId,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Bgp.Equal(other.Bgp) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.ExportPolicy.Equal(other.ExportPolicy) {
		return false
	}

	if !v.ImportPolicy.Equal(other.ImportPolicy) {
		return false
	}

	if !v.Node.Equal(other.Node) {
		return false
	}

	if !v.RouteLeaking.Equal(other.RouteLeaking) {
		return false
	}

	if !v.RouterId.Equal(other.RouterId) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bgp": basetypes.ObjectType{
			AttrTypes: BgpValue{}.AttributeTypes(ctx),
		},
		"description": basetypes.StringType{},
		"export_policy": basetypes.ListType{
			ElemType: types.StringType,
		},
		"import_policy": basetypes.ListType{
			ElemType: types.StringType,
		},
		"node": basetypes.StringType{},
		"route_leaking": basetypes.ObjectType{
			AttrTypes: RouteLeakingValue{}.AttributeTypes(ctx),
		},
		"router_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BgpType{}

type BgpType struct {
	basetypes.ObjectType
}

func (t BgpType) Equal(o attr.Type) bool {
	other, ok := o.(BgpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BgpType) String() string {
	return "BgpType"
}

func (t BgpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	autonomousSystemAttribute, ok := attributes["autonomous_system"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`autonomous_system is missing from object`)

		return nil, diags
	}

	autonomousSystemVal, ok := autonomousSystemAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`autonomous_system expected to be basetypes.Int64Value, was: %T`, autonomousSystemAttribute))
	}

	ebgpPreferenceAttribute, ok := attributes["ebgp_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ebgp_preference is missing from object`)

		return nil, diags
	}

	ebgpPreferenceVal, ok := ebgpPreferenceAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ebgp_preference expected to be basetypes.Int64Value, was: %T`, ebgpPreferenceAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	ibgpPreferenceAttribute, ok := attributes["ibgp_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ibgp_preference is missing from object`)

		return nil, diags
	}

	ibgpPreferenceVal, ok := ibgpPreferenceAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ibgp_preference expected to be basetypes.Int64Value, was: %T`, ibgpPreferenceAttribute))
	}

	ipv4UnicastAttribute, ok := attributes["ipv4_unicast"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_unicast is missing from object`)

		return nil, diags
	}

	ipv4UnicastVal, ok := ipv4UnicastAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_unicast expected to be basetypes.ObjectValue, was: %T`, ipv4UnicastAttribute))
	}

	ipv6UnicastAttribute, ok := attributes["ipv6_unicast"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv6_unicast is missing from object`)

		return nil, diags
	}

	ipv6UnicastVal, ok := ipv6UnicastAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv6_unicast expected to be basetypes.ObjectValue, was: %T`, ipv6UnicastAttribute))
	}

	keychainAttribute, ok := attributes["keychain"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`keychain is missing from object`)

		return nil, diags
	}

	keychainVal, ok := keychainAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`keychain expected to be basetypes.StringValue, was: %T`, keychainAttribute))
	}

	l2VpnEvpnAttribute, ok := attributes["l2_vpn_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`l2_vpn_evpn is missing from object`)

		return nil, diags
	}

	l2VpnEvpnVal, ok := l2VpnEvpnAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`l2_vpn_evpn expected to be basetypes.ObjectValue, was: %T`, l2VpnEvpnAttribute))
	}

	minWaitToAdvertiseAttribute, ok := attributes["min_wait_to_advertise"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_wait_to_advertise is missing from object`)

		return nil, diags
	}

	minWaitToAdvertiseVal, ok := minWaitToAdvertiseAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_wait_to_advertise expected to be basetypes.Int64Value, was: %T`, minWaitToAdvertiseAttribute))
	}

	rapidWithdrawlAttribute, ok := attributes["rapid_withdrawl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rapid_withdrawl is missing from object`)

		return nil, diags
	}

	rapidWithdrawlVal, ok := rapidWithdrawlAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rapid_withdrawl expected to be basetypes.BoolValue, was: %T`, rapidWithdrawlAttribute))
	}

	sendCommunityLargeAttribute, ok := attributes["send_community_large"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`send_community_large is missing from object`)

		return nil, diags
	}

	sendCommunityLargeVal, ok := sendCommunityLargeAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`send_community_large expected to be basetypes.BoolValue, was: %T`, sendCommunityLargeAttribute))
	}

	sendCommunityStandardAttribute, ok := attributes["send_community_standard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`send_community_standard is missing from object`)

		return nil, diags
	}

	sendCommunityStandardVal, ok := sendCommunityStandardAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`send_community_standard expected to be basetypes.BoolValue, was: %T`, sendCommunityStandardAttribute))
	}

	waitForFibInstallAttribute, ok := attributes["wait_for_fib_install"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wait_for_fib_install is missing from object`)

		return nil, diags
	}

	waitForFibInstallVal, ok := waitForFibInstallAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wait_for_fib_install expected to be basetypes.BoolValue, was: %T`, waitForFibInstallAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BgpValue{
		AutonomousSystem:      autonomousSystemVal,
		EbgpPreference:        ebgpPreferenceVal,
		Enabled:               enabledVal,
		IbgpPreference:        ibgpPreferenceVal,
		Ipv4Unicast:           ipv4UnicastVal,
		Ipv6Unicast:           ipv6UnicastVal,
		Keychain:              keychainVal,
		L2VpnEvpn:             l2VpnEvpnVal,
		MinWaitToAdvertise:    minWaitToAdvertiseVal,
		RapidWithdrawl:        rapidWithdrawlVal,
		SendCommunityLarge:    sendCommunityLargeVal,
		SendCommunityStandard: sendCommunityStandardVal,
		WaitForFibInstall:     waitForFibInstallVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewBgpValueNull() BgpValue {
	return BgpValue{
		state: attr.ValueStateNull,
	}
}

func NewBgpValueUnknown() BgpValue {
	return BgpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBgpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BgpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BgpValue Attribute Value",
				"While creating a BgpValue value, a missing attribute value was detected. "+
					"A BgpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BgpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BgpValue Attribute Type",
				"While creating a BgpValue value, an invalid attribute value was detected. "+
					"A BgpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BgpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BgpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BgpValue Attribute Value",
				"While creating a BgpValue value, an extra attribute value was detected. "+
					"A BgpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BgpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBgpValueUnknown(), diags
	}

	autonomousSystemAttribute, ok := attributes["autonomous_system"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`autonomous_system is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	autonomousSystemVal, ok := autonomousSystemAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`autonomous_system expected to be basetypes.Int64Value, was: %T`, autonomousSystemAttribute))
	}

	ebgpPreferenceAttribute, ok := attributes["ebgp_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ebgp_preference is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	ebgpPreferenceVal, ok := ebgpPreferenceAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ebgp_preference expected to be basetypes.Int64Value, was: %T`, ebgpPreferenceAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	ibgpPreferenceAttribute, ok := attributes["ibgp_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ibgp_preference is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	ibgpPreferenceVal, ok := ibgpPreferenceAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ibgp_preference expected to be basetypes.Int64Value, was: %T`, ibgpPreferenceAttribute))
	}

	ipv4UnicastAttribute, ok := attributes["ipv4_unicast"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_unicast is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	ipv4UnicastVal, ok := ipv4UnicastAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_unicast expected to be basetypes.ObjectValue, was: %T`, ipv4UnicastAttribute))
	}

	ipv6UnicastAttribute, ok := attributes["ipv6_unicast"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv6_unicast is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	ipv6UnicastVal, ok := ipv6UnicastAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv6_unicast expected to be basetypes.ObjectValue, was: %T`, ipv6UnicastAttribute))
	}

	keychainAttribute, ok := attributes["keychain"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`keychain is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	keychainVal, ok := keychainAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`keychain expected to be basetypes.StringValue, was: %T`, keychainAttribute))
	}

	l2VpnEvpnAttribute, ok := attributes["l2_vpn_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`l2_vpn_evpn is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	l2VpnEvpnVal, ok := l2VpnEvpnAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`l2_vpn_evpn expected to be basetypes.ObjectValue, was: %T`, l2VpnEvpnAttribute))
	}

	minWaitToAdvertiseAttribute, ok := attributes["min_wait_to_advertise"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_wait_to_advertise is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	minWaitToAdvertiseVal, ok := minWaitToAdvertiseAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_wait_to_advertise expected to be basetypes.Int64Value, was: %T`, minWaitToAdvertiseAttribute))
	}

	rapidWithdrawlAttribute, ok := attributes["rapid_withdrawl"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rapid_withdrawl is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	rapidWithdrawlVal, ok := rapidWithdrawlAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rapid_withdrawl expected to be basetypes.BoolValue, was: %T`, rapidWithdrawlAttribute))
	}

	sendCommunityLargeAttribute, ok := attributes["send_community_large"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`send_community_large is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	sendCommunityLargeVal, ok := sendCommunityLargeAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`send_community_large expected to be basetypes.BoolValue, was: %T`, sendCommunityLargeAttribute))
	}

	sendCommunityStandardAttribute, ok := attributes["send_community_standard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`send_community_standard is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	sendCommunityStandardVal, ok := sendCommunityStandardAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`send_community_standard expected to be basetypes.BoolValue, was: %T`, sendCommunityStandardAttribute))
	}

	waitForFibInstallAttribute, ok := attributes["wait_for_fib_install"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wait_for_fib_install is missing from object`)

		return NewBgpValueUnknown(), diags
	}

	waitForFibInstallVal, ok := waitForFibInstallAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wait_for_fib_install expected to be basetypes.BoolValue, was: %T`, waitForFibInstallAttribute))
	}

	if diags.HasError() {
		return NewBgpValueUnknown(), diags
	}

	return BgpValue{
		AutonomousSystem:      autonomousSystemVal,
		EbgpPreference:        ebgpPreferenceVal,
		Enabled:               enabledVal,
		IbgpPreference:        ibgpPreferenceVal,
		Ipv4Unicast:           ipv4UnicastVal,
		Ipv6Unicast:           ipv6UnicastVal,
		Keychain:              keychainVal,
		L2VpnEvpn:             l2VpnEvpnVal,
		MinWaitToAdvertise:    minWaitToAdvertiseVal,
		RapidWithdrawl:        rapidWithdrawlVal,
		SendCommunityLarge:    sendCommunityLargeVal,
		SendCommunityStandard: sendCommunityStandardVal,
		WaitForFibInstall:     waitForFibInstallVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewBgpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BgpValue {
	object, diags := NewBgpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBgpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BgpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBgpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBgpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBgpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBgpValueMust(BgpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BgpType) ValueType(ctx context.Context) attr.Value {
	return BgpValue{}
}

var _ basetypes.ObjectValuable = BgpValue{}

type BgpValue struct {
	AutonomousSystem      basetypes.Int64Value  `tfsdk:"autonomous_system"`
	EbgpPreference        basetypes.Int64Value  `tfsdk:"ebgp_preference"`
	Enabled               basetypes.BoolValue   `tfsdk:"enabled"`
	IbgpPreference        basetypes.Int64Value  `tfsdk:"ibgp_preference"`
	Ipv4Unicast           basetypes.ObjectValue `tfsdk:"ipv4_unicast"`
	Ipv6Unicast           basetypes.ObjectValue `tfsdk:"ipv6_unicast"`
	Keychain              basetypes.StringValue `tfsdk:"keychain"`
	L2VpnEvpn             basetypes.ObjectValue `tfsdk:"l2_vpn_evpn"`
	MinWaitToAdvertise    basetypes.Int64Value  `tfsdk:"min_wait_to_advertise"`
	RapidWithdrawl        basetypes.BoolValue   `tfsdk:"rapid_withdrawl"`
	SendCommunityLarge    basetypes.BoolValue   `tfsdk:"send_community_large"`
	SendCommunityStandard basetypes.BoolValue   `tfsdk:"send_community_standard"`
	WaitForFibInstall     basetypes.BoolValue   `tfsdk:"wait_for_fib_install"`
	state                 attr.ValueState
}

func (v BgpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 13)

	var val tftypes.Value
	var err error

	attrTypes["autonomous_system"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ebgp_preference"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["ibgp_preference"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ipv4_unicast"] = basetypes.ObjectType{
		AttrTypes: Ipv4UnicastValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["ipv6_unicast"] = basetypes.ObjectType{
		AttrTypes: Ipv6UnicastValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["keychain"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["l2_vpn_evpn"] = basetypes.ObjectType{
		AttrTypes: L2VpnEvpnValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["min_wait_to_advertise"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["rapid_withdrawl"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["send_community_large"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["send_community_standard"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["wait_for_fib_install"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 13)

		val, err = v.AutonomousSystem.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["autonomous_system"] = val

		val, err = v.EbgpPreference.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ebgp_preference"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.IbgpPreference.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ibgp_preference"] = val

		val, err = v.Ipv4Unicast.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv4_unicast"] = val

		val, err = v.Ipv6Unicast.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv6_unicast"] = val

		val, err = v.Keychain.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["keychain"] = val

		val, err = v.L2VpnEvpn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["l2_vpn_evpn"] = val

		val, err = v.MinWaitToAdvertise.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_wait_to_advertise"] = val

		val, err = v.RapidWithdrawl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rapid_withdrawl"] = val

		val, err = v.SendCommunityLarge.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["send_community_large"] = val

		val, err = v.SendCommunityStandard.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["send_community_standard"] = val

		val, err = v.WaitForFibInstall.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wait_for_fib_install"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BgpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BgpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BgpValue) String() string {
	return "BgpValue"
}

func (v BgpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var ipv4Unicast basetypes.ObjectValue

	if v.Ipv4Unicast.IsNull() {
		ipv4Unicast = types.ObjectNull(
			Ipv4UnicastValue{}.AttributeTypes(ctx),
		)
	}

	if v.Ipv4Unicast.IsUnknown() {
		ipv4Unicast = types.ObjectUnknown(
			Ipv4UnicastValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Ipv4Unicast.IsNull() && !v.Ipv4Unicast.IsUnknown() {
		ipv4Unicast = types.ObjectValueMust(
			Ipv4UnicastValue{}.AttributeTypes(ctx),
			v.Ipv4Unicast.Attributes(),
		)
	}

	var ipv6Unicast basetypes.ObjectValue

	if v.Ipv6Unicast.IsNull() {
		ipv6Unicast = types.ObjectNull(
			Ipv6UnicastValue{}.AttributeTypes(ctx),
		)
	}

	if v.Ipv6Unicast.IsUnknown() {
		ipv6Unicast = types.ObjectUnknown(
			Ipv6UnicastValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Ipv6Unicast.IsNull() && !v.Ipv6Unicast.IsUnknown() {
		ipv6Unicast = types.ObjectValueMust(
			Ipv6UnicastValue{}.AttributeTypes(ctx),
			v.Ipv6Unicast.Attributes(),
		)
	}

	var l2VpnEvpn basetypes.ObjectValue

	if v.L2VpnEvpn.IsNull() {
		l2VpnEvpn = types.ObjectNull(
			L2VpnEvpnValue{}.AttributeTypes(ctx),
		)
	}

	if v.L2VpnEvpn.IsUnknown() {
		l2VpnEvpn = types.ObjectUnknown(
			L2VpnEvpnValue{}.AttributeTypes(ctx),
		)
	}

	if !v.L2VpnEvpn.IsNull() && !v.L2VpnEvpn.IsUnknown() {
		l2VpnEvpn = types.ObjectValueMust(
			L2VpnEvpnValue{}.AttributeTypes(ctx),
			v.L2VpnEvpn.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"autonomous_system": basetypes.Int64Type{},
		"ebgp_preference":   basetypes.Int64Type{},
		"enabled":           basetypes.BoolType{},
		"ibgp_preference":   basetypes.Int64Type{},
		"ipv4_unicast": basetypes.ObjectType{
			AttrTypes: Ipv4UnicastValue{}.AttributeTypes(ctx),
		},
		"ipv6_unicast": basetypes.ObjectType{
			AttrTypes: Ipv6UnicastValue{}.AttributeTypes(ctx),
		},
		"keychain": basetypes.StringType{},
		"l2_vpn_evpn": basetypes.ObjectType{
			AttrTypes: L2VpnEvpnValue{}.AttributeTypes(ctx),
		},
		"min_wait_to_advertise":   basetypes.Int64Type{},
		"rapid_withdrawl":         basetypes.BoolType{},
		"send_community_large":    basetypes.BoolType{},
		"send_community_standard": basetypes.BoolType{},
		"wait_for_fib_install":    basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"autonomous_system":       v.AutonomousSystem,
			"ebgp_preference":         v.EbgpPreference,
			"enabled":                 v.Enabled,
			"ibgp_preference":         v.IbgpPreference,
			"ipv4_unicast":            ipv4Unicast,
			"ipv6_unicast":            ipv6Unicast,
			"keychain":                v.Keychain,
			"l2_vpn_evpn":             l2VpnEvpn,
			"min_wait_to_advertise":   v.MinWaitToAdvertise,
			"rapid_withdrawl":         v.RapidWithdrawl,
			"send_community_large":    v.SendCommunityLarge,
			"send_community_standard": v.SendCommunityStandard,
			"wait_for_fib_install":    v.WaitForFibInstall,
		})

	return objVal, diags
}

func (v BgpValue) Equal(o attr.Value) bool {
	other, ok := o.(BgpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AutonomousSystem.Equal(other.AutonomousSystem) {
		return false
	}

	if !v.EbgpPreference.Equal(other.EbgpPreference) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.IbgpPreference.Equal(other.IbgpPreference) {
		return false
	}

	if !v.Ipv4Unicast.Equal(other.Ipv4Unicast) {
		return false
	}

	if !v.Ipv6Unicast.Equal(other.Ipv6Unicast) {
		return false
	}

	if !v.Keychain.Equal(other.Keychain) {
		return false
	}

	if !v.L2VpnEvpn.Equal(other.L2VpnEvpn) {
		return false
	}

	if !v.MinWaitToAdvertise.Equal(other.MinWaitToAdvertise) {
		return false
	}

	if !v.RapidWithdrawl.Equal(other.RapidWithdrawl) {
		return false
	}

	if !v.SendCommunityLarge.Equal(other.SendCommunityLarge) {
		return false
	}

	if !v.SendCommunityStandard.Equal(other.SendCommunityStandard) {
		return false
	}

	if !v.WaitForFibInstall.Equal(other.WaitForFibInstall) {
		return false
	}

	return true
}

func (v BgpValue) Type(ctx context.Context) attr.Type {
	return BgpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BgpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"autonomous_system": basetypes.Int64Type{},
		"ebgp_preference":   basetypes.Int64Type{},
		"enabled":           basetypes.BoolType{},
		"ibgp_preference":   basetypes.Int64Type{},
		"ipv4_unicast": basetypes.ObjectType{
			AttrTypes: Ipv4UnicastValue{}.AttributeTypes(ctx),
		},
		"ipv6_unicast": basetypes.ObjectType{
			AttrTypes: Ipv6UnicastValue{}.AttributeTypes(ctx),
		},
		"keychain": basetypes.StringType{},
		"l2_vpn_evpn": basetypes.ObjectType{
			AttrTypes: L2VpnEvpnValue{}.AttributeTypes(ctx),
		},
		"min_wait_to_advertise":   basetypes.Int64Type{},
		"rapid_withdrawl":         basetypes.BoolType{},
		"send_community_large":    basetypes.BoolType{},
		"send_community_standard": basetypes.BoolType{},
		"wait_for_fib_install":    basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = Ipv4UnicastType{}

type Ipv4UnicastType struct {
	basetypes.ObjectType
}

func (t Ipv4UnicastType) Equal(o attr.Type) bool {
	other, ok := o.(Ipv4UnicastType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Ipv4UnicastType) String() string {
	return "Ipv4UnicastType"
}

func (t Ipv4UnicastType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	advertiseIpv6NextHopsAttribute, ok := attributes["advertise_ipv6_next_hops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_ipv6_next_hops is missing from object`)

		return nil, diags
	}

	advertiseIpv6NextHopsVal, ok := advertiseIpv6NextHopsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_ipv6_next_hops expected to be basetypes.BoolValue, was: %T`, advertiseIpv6NextHopsAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	multipathAttribute, ok := attributes["multipath"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multipath is missing from object`)

		return nil, diags
	}

	multipathVal, ok := multipathAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multipath expected to be basetypes.ObjectValue, was: %T`, multipathAttribute))
	}

	rapidUpdateAttribute, ok := attributes["rapid_update"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rapid_update is missing from object`)

		return nil, diags
	}

	rapidUpdateVal, ok := rapidUpdateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rapid_update expected to be basetypes.BoolValue, was: %T`, rapidUpdateAttribute))
	}

	receiveIpv6NextHopsAttribute, ok := attributes["receive_ipv6_next_hops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`receive_ipv6_next_hops is missing from object`)

		return nil, diags
	}

	receiveIpv6NextHopsVal, ok := receiveIpv6NextHopsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`receive_ipv6_next_hops expected to be basetypes.BoolValue, was: %T`, receiveIpv6NextHopsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Ipv4UnicastValue{
		AdvertiseIpv6NextHops: advertiseIpv6NextHopsVal,
		Enabled:               enabledVal,
		Multipath:             multipathVal,
		RapidUpdate:           rapidUpdateVal,
		ReceiveIpv6NextHops:   receiveIpv6NextHopsVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewIpv4UnicastValueNull() Ipv4UnicastValue {
	return Ipv4UnicastValue{
		state: attr.ValueStateNull,
	}
}

func NewIpv4UnicastValueUnknown() Ipv4UnicastValue {
	return Ipv4UnicastValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIpv4UnicastValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Ipv4UnicastValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Ipv4UnicastValue Attribute Value",
				"While creating a Ipv4UnicastValue value, a missing attribute value was detected. "+
					"A Ipv4UnicastValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Ipv4UnicastValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Ipv4UnicastValue Attribute Type",
				"While creating a Ipv4UnicastValue value, an invalid attribute value was detected. "+
					"A Ipv4UnicastValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Ipv4UnicastValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Ipv4UnicastValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Ipv4UnicastValue Attribute Value",
				"While creating a Ipv4UnicastValue value, an extra attribute value was detected. "+
					"A Ipv4UnicastValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Ipv4UnicastValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIpv4UnicastValueUnknown(), diags
	}

	advertiseIpv6NextHopsAttribute, ok := attributes["advertise_ipv6_next_hops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_ipv6_next_hops is missing from object`)

		return NewIpv4UnicastValueUnknown(), diags
	}

	advertiseIpv6NextHopsVal, ok := advertiseIpv6NextHopsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_ipv6_next_hops expected to be basetypes.BoolValue, was: %T`, advertiseIpv6NextHopsAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewIpv4UnicastValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	multipathAttribute, ok := attributes["multipath"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multipath is missing from object`)

		return NewIpv4UnicastValueUnknown(), diags
	}

	multipathVal, ok := multipathAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multipath expected to be basetypes.ObjectValue, was: %T`, multipathAttribute))
	}

	rapidUpdateAttribute, ok := attributes["rapid_update"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rapid_update is missing from object`)

		return NewIpv4UnicastValueUnknown(), diags
	}

	rapidUpdateVal, ok := rapidUpdateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rapid_update expected to be basetypes.BoolValue, was: %T`, rapidUpdateAttribute))
	}

	receiveIpv6NextHopsAttribute, ok := attributes["receive_ipv6_next_hops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`receive_ipv6_next_hops is missing from object`)

		return NewIpv4UnicastValueUnknown(), diags
	}

	receiveIpv6NextHopsVal, ok := receiveIpv6NextHopsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`receive_ipv6_next_hops expected to be basetypes.BoolValue, was: %T`, receiveIpv6NextHopsAttribute))
	}

	if diags.HasError() {
		return NewIpv4UnicastValueUnknown(), diags
	}

	return Ipv4UnicastValue{
		AdvertiseIpv6NextHops: advertiseIpv6NextHopsVal,
		Enabled:               enabledVal,
		Multipath:             multipathVal,
		RapidUpdate:           rapidUpdateVal,
		ReceiveIpv6NextHops:   receiveIpv6NextHopsVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewIpv4UnicastValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Ipv4UnicastValue {
	object, diags := NewIpv4UnicastValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIpv4UnicastValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Ipv4UnicastType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIpv4UnicastValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIpv4UnicastValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIpv4UnicastValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIpv4UnicastValueMust(Ipv4UnicastValue{}.AttributeTypes(ctx), attributes), nil
}

func (t Ipv4UnicastType) ValueType(ctx context.Context) attr.Value {
	return Ipv4UnicastValue{}
}

var _ basetypes.ObjectValuable = Ipv4UnicastValue{}

type Ipv4UnicastValue struct {
	AdvertiseIpv6NextHops basetypes.BoolValue   `tfsdk:"advertise_ipv6_next_hops"`
	Enabled               basetypes.BoolValue   `tfsdk:"enabled"`
	Multipath             basetypes.ObjectValue `tfsdk:"multipath"`
	RapidUpdate           basetypes.BoolValue   `tfsdk:"rapid_update"`
	ReceiveIpv6NextHops   basetypes.BoolValue   `tfsdk:"receive_ipv6_next_hops"`
	state                 attr.ValueState
}

func (v Ipv4UnicastValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["advertise_ipv6_next_hops"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["multipath"] = basetypes.ObjectType{
		AttrTypes: MultipathValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["rapid_update"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["receive_ipv6_next_hops"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.AdvertiseIpv6NextHops.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["advertise_ipv6_next_hops"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Multipath.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["multipath"] = val

		val, err = v.RapidUpdate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rapid_update"] = val

		val, err = v.ReceiveIpv6NextHops.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["receive_ipv6_next_hops"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Ipv4UnicastValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Ipv4UnicastValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Ipv4UnicastValue) String() string {
	return "Ipv4UnicastValue"
}

func (v Ipv4UnicastValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var multipath basetypes.ObjectValue

	if v.Multipath.IsNull() {
		multipath = types.ObjectNull(
			MultipathValue{}.AttributeTypes(ctx),
		)
	}

	if v.Multipath.IsUnknown() {
		multipath = types.ObjectUnknown(
			MultipathValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Multipath.IsNull() && !v.Multipath.IsUnknown() {
		multipath = types.ObjectValueMust(
			MultipathValue{}.AttributeTypes(ctx),
			v.Multipath.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"advertise_ipv6_next_hops": basetypes.BoolType{},
		"enabled":                  basetypes.BoolType{},
		"multipath": basetypes.ObjectType{
			AttrTypes: MultipathValue{}.AttributeTypes(ctx),
		},
		"rapid_update":           basetypes.BoolType{},
		"receive_ipv6_next_hops": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"advertise_ipv6_next_hops": v.AdvertiseIpv6NextHops,
			"enabled":                  v.Enabled,
			"multipath":                multipath,
			"rapid_update":             v.RapidUpdate,
			"receive_ipv6_next_hops":   v.ReceiveIpv6NextHops,
		})

	return objVal, diags
}

func (v Ipv4UnicastValue) Equal(o attr.Value) bool {
	other, ok := o.(Ipv4UnicastValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdvertiseIpv6NextHops.Equal(other.AdvertiseIpv6NextHops) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Multipath.Equal(other.Multipath) {
		return false
	}

	if !v.RapidUpdate.Equal(other.RapidUpdate) {
		return false
	}

	if !v.ReceiveIpv6NextHops.Equal(other.ReceiveIpv6NextHops) {
		return false
	}

	return true
}

func (v Ipv4UnicastValue) Type(ctx context.Context) attr.Type {
	return Ipv4UnicastType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Ipv4UnicastValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"advertise_ipv6_next_hops": basetypes.BoolType{},
		"enabled":                  basetypes.BoolType{},
		"multipath": basetypes.ObjectType{
			AttrTypes: MultipathValue{}.AttributeTypes(ctx),
		},
		"rapid_update":           basetypes.BoolType{},
		"receive_ipv6_next_hops": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = MultipathType{}

type MultipathType struct {
	basetypes.ObjectType
}

func (t MultipathType) Equal(o attr.Type) bool {
	other, ok := o.(MultipathType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MultipathType) String() string {
	return "MultipathType"
}

func (t MultipathType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowMultipleAsAttribute, ok := attributes["allow_multiple_as"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_multiple_as is missing from object`)

		return nil, diags
	}

	allowMultipleAsVal, ok := allowMultipleAsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_multiple_as expected to be basetypes.BoolValue, was: %T`, allowMultipleAsAttribute))
	}

	maxAllowedPathsAttribute, ok := attributes["max_allowed_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_allowed_paths is missing from object`)

		return nil, diags
	}

	maxAllowedPathsVal, ok := maxAllowedPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_allowed_paths expected to be basetypes.Int64Value, was: %T`, maxAllowedPathsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MultipathValue{
		AllowMultipleAs: allowMultipleAsVal,
		MaxAllowedPaths: maxAllowedPathsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMultipathValueNull() MultipathValue {
	return MultipathValue{
		state: attr.ValueStateNull,
	}
}

func NewMultipathValueUnknown() MultipathValue {
	return MultipathValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMultipathValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MultipathValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MultipathValue Attribute Value",
				"While creating a MultipathValue value, a missing attribute value was detected. "+
					"A MultipathValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MultipathValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MultipathValue Attribute Type",
				"While creating a MultipathValue value, an invalid attribute value was detected. "+
					"A MultipathValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MultipathValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MultipathValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MultipathValue Attribute Value",
				"While creating a MultipathValue value, an extra attribute value was detected. "+
					"A MultipathValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MultipathValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMultipathValueUnknown(), diags
	}

	allowMultipleAsAttribute, ok := attributes["allow_multiple_as"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_multiple_as is missing from object`)

		return NewMultipathValueUnknown(), diags
	}

	allowMultipleAsVal, ok := allowMultipleAsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_multiple_as expected to be basetypes.BoolValue, was: %T`, allowMultipleAsAttribute))
	}

	maxAllowedPathsAttribute, ok := attributes["max_allowed_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_allowed_paths is missing from object`)

		return NewMultipathValueUnknown(), diags
	}

	maxAllowedPathsVal, ok := maxAllowedPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_allowed_paths expected to be basetypes.Int64Value, was: %T`, maxAllowedPathsAttribute))
	}

	if diags.HasError() {
		return NewMultipathValueUnknown(), diags
	}

	return MultipathValue{
		AllowMultipleAs: allowMultipleAsVal,
		MaxAllowedPaths: maxAllowedPathsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMultipathValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MultipathValue {
	object, diags := NewMultipathValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMultipathValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MultipathType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMultipathValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMultipathValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMultipathValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMultipathValueMust(MultipathValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MultipathType) ValueType(ctx context.Context) attr.Value {
	return MultipathValue{}
}

var _ basetypes.ObjectValuable = MultipathValue{}

type MultipathValue struct {
	AllowMultipleAs basetypes.BoolValue  `tfsdk:"allow_multiple_as"`
	MaxAllowedPaths basetypes.Int64Value `tfsdk:"max_allowed_paths"`
	state           attr.ValueState
}

func (v MultipathValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["allow_multiple_as"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["max_allowed_paths"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.AllowMultipleAs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allow_multiple_as"] = val

		val, err = v.MaxAllowedPaths.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_allowed_paths"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MultipathValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MultipathValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MultipathValue) String() string {
	return "MultipathValue"
}

func (v MultipathValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"allow_multiple_as": basetypes.BoolType{},
		"max_allowed_paths": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allow_multiple_as": v.AllowMultipleAs,
			"max_allowed_paths": v.MaxAllowedPaths,
		})

	return objVal, diags
}

func (v MultipathValue) Equal(o attr.Value) bool {
	other, ok := o.(MultipathValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllowMultipleAs.Equal(other.AllowMultipleAs) {
		return false
	}

	if !v.MaxAllowedPaths.Equal(other.MaxAllowedPaths) {
		return false
	}

	return true
}

func (v MultipathValue) Type(ctx context.Context) attr.Type {
	return MultipathType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MultipathValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allow_multiple_as": basetypes.BoolType{},
		"max_allowed_paths": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = Ipv6UnicastType{}

type Ipv6UnicastType struct {
	basetypes.ObjectType
}

func (t Ipv6UnicastType) Equal(o attr.Type) bool {
	other, ok := o.(Ipv6UnicastType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Ipv6UnicastType) String() string {
	return "Ipv6UnicastType"
}

func (t Ipv6UnicastType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	multipath1Attribute, ok := attributes["multipath"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multipath_1 is missing from object`)

		return nil, diags
	}

	multipath1Val, ok := multipath1Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multipath_1 expected to be basetypes.ObjectValue, was: %T`, multipath1Attribute))
	}

	rapidUpdateAttribute, ok := attributes["rapid_update"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rapid_update is missing from object`)

		return nil, diags
	}

	rapidUpdateVal, ok := rapidUpdateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rapid_update expected to be basetypes.BoolValue, was: %T`, rapidUpdateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Ipv6UnicastValue{
		Enabled:     enabledVal,
		Multipath1:  multipath1Val,
		RapidUpdate: rapidUpdateVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewIpv6UnicastValueNull() Ipv6UnicastValue {
	return Ipv6UnicastValue{
		state: attr.ValueStateNull,
	}
}

func NewIpv6UnicastValueUnknown() Ipv6UnicastValue {
	return Ipv6UnicastValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIpv6UnicastValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Ipv6UnicastValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Ipv6UnicastValue Attribute Value",
				"While creating a Ipv6UnicastValue value, a missing attribute value was detected. "+
					"A Ipv6UnicastValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Ipv6UnicastValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Ipv6UnicastValue Attribute Type",
				"While creating a Ipv6UnicastValue value, an invalid attribute value was detected. "+
					"A Ipv6UnicastValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Ipv6UnicastValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Ipv6UnicastValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Ipv6UnicastValue Attribute Value",
				"While creating a Ipv6UnicastValue value, an extra attribute value was detected. "+
					"A Ipv6UnicastValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Ipv6UnicastValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIpv6UnicastValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewIpv6UnicastValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	multipath1Attribute, ok := attributes["multipath"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multipath_1 is missing from object`)

		return NewIpv6UnicastValueUnknown(), diags
	}

	multipath1Val, ok := multipath1Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multipath_1 expected to be basetypes.ObjectValue, was: %T`, multipath1Attribute))
	}

	rapidUpdateAttribute, ok := attributes["rapid_update"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rapid_update is missing from object`)

		return NewIpv6UnicastValueUnknown(), diags
	}

	rapidUpdateVal, ok := rapidUpdateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rapid_update expected to be basetypes.BoolValue, was: %T`, rapidUpdateAttribute))
	}

	if diags.HasError() {
		return NewIpv6UnicastValueUnknown(), diags
	}

	return Ipv6UnicastValue{
		Enabled:     enabledVal,
		Multipath1:  multipath1Val,
		RapidUpdate: rapidUpdateVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewIpv6UnicastValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Ipv6UnicastValue {
	object, diags := NewIpv6UnicastValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIpv6UnicastValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Ipv6UnicastType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIpv6UnicastValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIpv6UnicastValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIpv6UnicastValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIpv6UnicastValueMust(Ipv6UnicastValue{}.AttributeTypes(ctx), attributes), nil
}

func (t Ipv6UnicastType) ValueType(ctx context.Context) attr.Value {
	return Ipv6UnicastValue{}
}

var _ basetypes.ObjectValuable = Ipv6UnicastValue{}

type Ipv6UnicastValue struct {
	Enabled     basetypes.BoolValue   `tfsdk:"enabled"`
	Multipath1  basetypes.ObjectValue `tfsdk:"multipath"`
	RapidUpdate basetypes.BoolValue   `tfsdk:"rapid_update"`
	state       attr.ValueState
}

func (v Ipv6UnicastValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["multipath"] = basetypes.ObjectType{
		AttrTypes: Multipath1Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["rapid_update"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Multipath1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["multipath"] = val

		val, err = v.RapidUpdate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rapid_update"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Ipv6UnicastValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Ipv6UnicastValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Ipv6UnicastValue) String() string {
	return "Ipv6UnicastValue"
}

func (v Ipv6UnicastValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var multipath1 basetypes.ObjectValue

	if v.Multipath1.IsNull() {
		multipath1 = types.ObjectNull(
			Multipath1Value{}.AttributeTypes(ctx),
		)
	}

	if v.Multipath1.IsUnknown() {
		multipath1 = types.ObjectUnknown(
			Multipath1Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Multipath1.IsNull() && !v.Multipath1.IsUnknown() {
		multipath1 = types.ObjectValueMust(
			Multipath1Value{}.AttributeTypes(ctx),
			v.Multipath1.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"multipath": basetypes.ObjectType{
			AttrTypes: Multipath1Value{}.AttributeTypes(ctx),
		},
		"rapid_update": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":      v.Enabled,
			"multipath":    multipath1,
			"rapid_update": v.RapidUpdate,
		})

	return objVal, diags
}

func (v Ipv6UnicastValue) Equal(o attr.Value) bool {
	other, ok := o.(Ipv6UnicastValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Multipath1.Equal(other.Multipath1) {
		return false
	}

	if !v.RapidUpdate.Equal(other.RapidUpdate) {
		return false
	}

	return true
}

func (v Ipv6UnicastValue) Type(ctx context.Context) attr.Type {
	return Ipv6UnicastType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Ipv6UnicastValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
		"multipath": basetypes.ObjectType{
			AttrTypes: Multipath1Value{}.AttributeTypes(ctx),
		},
		"rapid_update": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = Multipath1Type{}

type Multipath1Type struct {
	basetypes.ObjectType
}

func (t Multipath1Type) Equal(o attr.Type) bool {
	other, ok := o.(Multipath1Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Multipath1Type) String() string {
	return "Multipath1Type"
}

func (t Multipath1Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowMultipleAsAttribute, ok := attributes["allow_multiple_as"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_multiple_as is missing from object`)

		return nil, diags
	}

	allowMultipleAsVal, ok := allowMultipleAsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_multiple_as expected to be basetypes.BoolValue, was: %T`, allowMultipleAsAttribute))
	}

	maxAllowedPathsAttribute, ok := attributes["max_allowed_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_allowed_paths is missing from object`)

		return nil, diags
	}

	maxAllowedPathsVal, ok := maxAllowedPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_allowed_paths expected to be basetypes.Int64Value, was: %T`, maxAllowedPathsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Multipath1Value{
		AllowMultipleAs: allowMultipleAsVal,
		MaxAllowedPaths: maxAllowedPathsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMultipath1ValueNull() Multipath1Value {
	return Multipath1Value{
		state: attr.ValueStateNull,
	}
}

func NewMultipath1ValueUnknown() Multipath1Value {
	return Multipath1Value{
		state: attr.ValueStateUnknown,
	}
}

func NewMultipath1Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Multipath1Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Multipath1Value Attribute Value",
				"While creating a Multipath1Value value, a missing attribute value was detected. "+
					"A Multipath1Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Multipath1Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Multipath1Value Attribute Type",
				"While creating a Multipath1Value value, an invalid attribute value was detected. "+
					"A Multipath1Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Multipath1Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Multipath1Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Multipath1Value Attribute Value",
				"While creating a Multipath1Value value, an extra attribute value was detected. "+
					"A Multipath1Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Multipath1Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMultipath1ValueUnknown(), diags
	}

	allowMultipleAsAttribute, ok := attributes["allow_multiple_as"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_multiple_as is missing from object`)

		return NewMultipath1ValueUnknown(), diags
	}

	allowMultipleAsVal, ok := allowMultipleAsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_multiple_as expected to be basetypes.BoolValue, was: %T`, allowMultipleAsAttribute))
	}

	maxAllowedPathsAttribute, ok := attributes["max_allowed_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_allowed_paths is missing from object`)

		return NewMultipath1ValueUnknown(), diags
	}

	maxAllowedPathsVal, ok := maxAllowedPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_allowed_paths expected to be basetypes.Int64Value, was: %T`, maxAllowedPathsAttribute))
	}

	if diags.HasError() {
		return NewMultipath1ValueUnknown(), diags
	}

	return Multipath1Value{
		AllowMultipleAs: allowMultipleAsVal,
		MaxAllowedPaths: maxAllowedPathsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMultipath1ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Multipath1Value {
	object, diags := NewMultipath1Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMultipath1ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Multipath1Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMultipath1ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMultipath1ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMultipath1ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMultipath1ValueMust(Multipath1Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Multipath1Type) ValueType(ctx context.Context) attr.Value {
	return Multipath1Value{}
}

var _ basetypes.ObjectValuable = Multipath1Value{}

type Multipath1Value struct {
	AllowMultipleAs basetypes.BoolValue  `tfsdk:"allow_multiple_as"`
	MaxAllowedPaths basetypes.Int64Value `tfsdk:"max_allowed_paths"`
	state           attr.ValueState
}

func (v Multipath1Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["allow_multiple_as"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["max_allowed_paths"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.AllowMultipleAs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allow_multiple_as"] = val

		val, err = v.MaxAllowedPaths.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_allowed_paths"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Multipath1Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Multipath1Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Multipath1Value) String() string {
	return "Multipath1Value"
}

func (v Multipath1Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"allow_multiple_as": basetypes.BoolType{},
		"max_allowed_paths": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allow_multiple_as": v.AllowMultipleAs,
			"max_allowed_paths": v.MaxAllowedPaths,
		})

	return objVal, diags
}

func (v Multipath1Value) Equal(o attr.Value) bool {
	other, ok := o.(Multipath1Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllowMultipleAs.Equal(other.AllowMultipleAs) {
		return false
	}

	if !v.MaxAllowedPaths.Equal(other.MaxAllowedPaths) {
		return false
	}

	return true
}

func (v Multipath1Value) Type(ctx context.Context) attr.Type {
	return Multipath1Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Multipath1Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allow_multiple_as": basetypes.BoolType{},
		"max_allowed_paths": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = L2VpnEvpnType{}

type L2VpnEvpnType struct {
	basetypes.ObjectType
}

func (t L2VpnEvpnType) Equal(o attr.Type) bool {
	other, ok := o.(L2VpnEvpnType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t L2VpnEvpnType) String() string {
	return "L2VpnEvpnType"
}

func (t L2VpnEvpnType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	advertiseIpv6NextHopsAttribute, ok := attributes["advertise_ipv6_next_hops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_ipv6_next_hops is missing from object`)

		return nil, diags
	}

	advertiseIpv6NextHopsVal, ok := advertiseIpv6NextHopsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_ipv6_next_hops expected to be basetypes.BoolValue, was: %T`, advertiseIpv6NextHopsAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	interAsvpnAttribute, ok := attributes["inter_asvpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inter_asvpn is missing from object`)

		return nil, diags
	}

	interAsvpnVal, ok := interAsvpnAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inter_asvpn expected to be basetypes.BoolValue, was: %T`, interAsvpnAttribute))
	}

	multipath2Attribute, ok := attributes["multipath"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multipath_2 is missing from object`)

		return nil, diags
	}

	multipath2Val, ok := multipath2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multipath_2 expected to be basetypes.ObjectValue, was: %T`, multipath2Attribute))
	}

	rapidUpdateAttribute, ok := attributes["rapid_update"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rapid_update is missing from object`)

		return nil, diags
	}

	rapidUpdateVal, ok := rapidUpdateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rapid_update expected to be basetypes.BoolValue, was: %T`, rapidUpdateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return L2VpnEvpnValue{
		AdvertiseIpv6NextHops: advertiseIpv6NextHopsVal,
		Enabled:               enabledVal,
		InterAsvpn:            interAsvpnVal,
		Multipath2:            multipath2Val,
		RapidUpdate:           rapidUpdateVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewL2VpnEvpnValueNull() L2VpnEvpnValue {
	return L2VpnEvpnValue{
		state: attr.ValueStateNull,
	}
}

func NewL2VpnEvpnValueUnknown() L2VpnEvpnValue {
	return L2VpnEvpnValue{
		state: attr.ValueStateUnknown,
	}
}

func NewL2VpnEvpnValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (L2VpnEvpnValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing L2VpnEvpnValue Attribute Value",
				"While creating a L2VpnEvpnValue value, a missing attribute value was detected. "+
					"A L2VpnEvpnValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("L2VpnEvpnValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid L2VpnEvpnValue Attribute Type",
				"While creating a L2VpnEvpnValue value, an invalid attribute value was detected. "+
					"A L2VpnEvpnValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("L2VpnEvpnValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("L2VpnEvpnValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra L2VpnEvpnValue Attribute Value",
				"While creating a L2VpnEvpnValue value, an extra attribute value was detected. "+
					"A L2VpnEvpnValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra L2VpnEvpnValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewL2VpnEvpnValueUnknown(), diags
	}

	advertiseIpv6NextHopsAttribute, ok := attributes["advertise_ipv6_next_hops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_ipv6_next_hops is missing from object`)

		return NewL2VpnEvpnValueUnknown(), diags
	}

	advertiseIpv6NextHopsVal, ok := advertiseIpv6NextHopsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_ipv6_next_hops expected to be basetypes.BoolValue, was: %T`, advertiseIpv6NextHopsAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewL2VpnEvpnValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	interAsvpnAttribute, ok := attributes["inter_asvpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inter_asvpn is missing from object`)

		return NewL2VpnEvpnValueUnknown(), diags
	}

	interAsvpnVal, ok := interAsvpnAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inter_asvpn expected to be basetypes.BoolValue, was: %T`, interAsvpnAttribute))
	}

	multipath2Attribute, ok := attributes["multipath"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multipath_2 is missing from object`)

		return NewL2VpnEvpnValueUnknown(), diags
	}

	multipath2Val, ok := multipath2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multipath_2 expected to be basetypes.ObjectValue, was: %T`, multipath2Attribute))
	}

	rapidUpdateAttribute, ok := attributes["rapid_update"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rapid_update is missing from object`)

		return NewL2VpnEvpnValueUnknown(), diags
	}

	rapidUpdateVal, ok := rapidUpdateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rapid_update expected to be basetypes.BoolValue, was: %T`, rapidUpdateAttribute))
	}

	if diags.HasError() {
		return NewL2VpnEvpnValueUnknown(), diags
	}

	return L2VpnEvpnValue{
		AdvertiseIpv6NextHops: advertiseIpv6NextHopsVal,
		Enabled:               enabledVal,
		InterAsvpn:            interAsvpnVal,
		Multipath2:            multipath2Val,
		RapidUpdate:           rapidUpdateVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewL2VpnEvpnValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) L2VpnEvpnValue {
	object, diags := NewL2VpnEvpnValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewL2VpnEvpnValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t L2VpnEvpnType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewL2VpnEvpnValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewL2VpnEvpnValueUnknown(), nil
	}

	if in.IsNull() {
		return NewL2VpnEvpnValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewL2VpnEvpnValueMust(L2VpnEvpnValue{}.AttributeTypes(ctx), attributes), nil
}

func (t L2VpnEvpnType) ValueType(ctx context.Context) attr.Value {
	return L2VpnEvpnValue{}
}

var _ basetypes.ObjectValuable = L2VpnEvpnValue{}

type L2VpnEvpnValue struct {
	AdvertiseIpv6NextHops basetypes.BoolValue   `tfsdk:"advertise_ipv6_next_hops"`
	Enabled               basetypes.BoolValue   `tfsdk:"enabled"`
	InterAsvpn            basetypes.BoolValue   `tfsdk:"inter_asvpn"`
	Multipath2            basetypes.ObjectValue `tfsdk:"multipath"`
	RapidUpdate           basetypes.BoolValue   `tfsdk:"rapid_update"`
	state                 attr.ValueState
}

func (v L2VpnEvpnValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["advertise_ipv6_next_hops"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["inter_asvpn"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["multipath"] = basetypes.ObjectType{
		AttrTypes: Multipath2Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["rapid_update"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.AdvertiseIpv6NextHops.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["advertise_ipv6_next_hops"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.InterAsvpn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["inter_asvpn"] = val

		val, err = v.Multipath2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["multipath"] = val

		val, err = v.RapidUpdate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rapid_update"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v L2VpnEvpnValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v L2VpnEvpnValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v L2VpnEvpnValue) String() string {
	return "L2VpnEvpnValue"
}

func (v L2VpnEvpnValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var multipath2 basetypes.ObjectValue

	if v.Multipath2.IsNull() {
		multipath2 = types.ObjectNull(
			Multipath2Value{}.AttributeTypes(ctx),
		)
	}

	if v.Multipath2.IsUnknown() {
		multipath2 = types.ObjectUnknown(
			Multipath2Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Multipath2.IsNull() && !v.Multipath2.IsUnknown() {
		multipath2 = types.ObjectValueMust(
			Multipath2Value{}.AttributeTypes(ctx),
			v.Multipath2.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"advertise_ipv6_next_hops": basetypes.BoolType{},
		"enabled":                  basetypes.BoolType{},
		"inter_asvpn":              basetypes.BoolType{},
		"multipath": basetypes.ObjectType{
			AttrTypes: Multipath2Value{}.AttributeTypes(ctx),
		},
		"rapid_update": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"advertise_ipv6_next_hops": v.AdvertiseIpv6NextHops,
			"enabled":                  v.Enabled,
			"inter_asvpn":              v.InterAsvpn,
			"multipath":                multipath2,
			"rapid_update":             v.RapidUpdate,
		})

	return objVal, diags
}

func (v L2VpnEvpnValue) Equal(o attr.Value) bool {
	other, ok := o.(L2VpnEvpnValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdvertiseIpv6NextHops.Equal(other.AdvertiseIpv6NextHops) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.InterAsvpn.Equal(other.InterAsvpn) {
		return false
	}

	if !v.Multipath2.Equal(other.Multipath2) {
		return false
	}

	if !v.RapidUpdate.Equal(other.RapidUpdate) {
		return false
	}

	return true
}

func (v L2VpnEvpnValue) Type(ctx context.Context) attr.Type {
	return L2VpnEvpnType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v L2VpnEvpnValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"advertise_ipv6_next_hops": basetypes.BoolType{},
		"enabled":                  basetypes.BoolType{},
		"inter_asvpn":              basetypes.BoolType{},
		"multipath": basetypes.ObjectType{
			AttrTypes: Multipath2Value{}.AttributeTypes(ctx),
		},
		"rapid_update": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = Multipath2Type{}

type Multipath2Type struct {
	basetypes.ObjectType
}

func (t Multipath2Type) Equal(o attr.Type) bool {
	other, ok := o.(Multipath2Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Multipath2Type) String() string {
	return "Multipath2Type"
}

func (t Multipath2Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowMultipleAsAttribute, ok := attributes["allow_multiple_as"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_multiple_as is missing from object`)

		return nil, diags
	}

	allowMultipleAsVal, ok := allowMultipleAsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_multiple_as expected to be basetypes.BoolValue, was: %T`, allowMultipleAsAttribute))
	}

	maxAllowedPathsAttribute, ok := attributes["max_allowed_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_allowed_paths is missing from object`)

		return nil, diags
	}

	maxAllowedPathsVal, ok := maxAllowedPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_allowed_paths expected to be basetypes.Int64Value, was: %T`, maxAllowedPathsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Multipath2Value{
		AllowMultipleAs: allowMultipleAsVal,
		MaxAllowedPaths: maxAllowedPathsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMultipath2ValueNull() Multipath2Value {
	return Multipath2Value{
		state: attr.ValueStateNull,
	}
}

func NewMultipath2ValueUnknown() Multipath2Value {
	return Multipath2Value{
		state: attr.ValueStateUnknown,
	}
}

func NewMultipath2Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Multipath2Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Multipath2Value Attribute Value",
				"While creating a Multipath2Value value, a missing attribute value was detected. "+
					"A Multipath2Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Multipath2Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Multipath2Value Attribute Type",
				"While creating a Multipath2Value value, an invalid attribute value was detected. "+
					"A Multipath2Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Multipath2Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Multipath2Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Multipath2Value Attribute Value",
				"While creating a Multipath2Value value, an extra attribute value was detected. "+
					"A Multipath2Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Multipath2Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMultipath2ValueUnknown(), diags
	}

	allowMultipleAsAttribute, ok := attributes["allow_multiple_as"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_multiple_as is missing from object`)

		return NewMultipath2ValueUnknown(), diags
	}

	allowMultipleAsVal, ok := allowMultipleAsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_multiple_as expected to be basetypes.BoolValue, was: %T`, allowMultipleAsAttribute))
	}

	maxAllowedPathsAttribute, ok := attributes["max_allowed_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_allowed_paths is missing from object`)

		return NewMultipath2ValueUnknown(), diags
	}

	maxAllowedPathsVal, ok := maxAllowedPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_allowed_paths expected to be basetypes.Int64Value, was: %T`, maxAllowedPathsAttribute))
	}

	if diags.HasError() {
		return NewMultipath2ValueUnknown(), diags
	}

	return Multipath2Value{
		AllowMultipleAs: allowMultipleAsVal,
		MaxAllowedPaths: maxAllowedPathsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMultipath2ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Multipath2Value {
	object, diags := NewMultipath2Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMultipath2ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Multipath2Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMultipath2ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMultipath2ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMultipath2ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMultipath2ValueMust(Multipath2Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Multipath2Type) ValueType(ctx context.Context) attr.Value {
	return Multipath2Value{}
}

var _ basetypes.ObjectValuable = Multipath2Value{}

type Multipath2Value struct {
	AllowMultipleAs basetypes.BoolValue  `tfsdk:"allow_multiple_as"`
	MaxAllowedPaths basetypes.Int64Value `tfsdk:"max_allowed_paths"`
	state           attr.ValueState
}

func (v Multipath2Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["allow_multiple_as"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["max_allowed_paths"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.AllowMultipleAs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allow_multiple_as"] = val

		val, err = v.MaxAllowedPaths.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_allowed_paths"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Multipath2Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Multipath2Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Multipath2Value) String() string {
	return "Multipath2Value"
}

func (v Multipath2Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"allow_multiple_as": basetypes.BoolType{},
		"max_allowed_paths": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allow_multiple_as": v.AllowMultipleAs,
			"max_allowed_paths": v.MaxAllowedPaths,
		})

	return objVal, diags
}

func (v Multipath2Value) Equal(o attr.Value) bool {
	other, ok := o.(Multipath2Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllowMultipleAs.Equal(other.AllowMultipleAs) {
		return false
	}

	if !v.MaxAllowedPaths.Equal(other.MaxAllowedPaths) {
		return false
	}

	return true
}

func (v Multipath2Value) Type(ctx context.Context) attr.Type {
	return Multipath2Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Multipath2Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allow_multiple_as": basetypes.BoolType{},
		"max_allowed_paths": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = RouteLeakingType{}

type RouteLeakingType struct {
	basetypes.ObjectType
}

func (t RouteLeakingType) Equal(o attr.Type) bool {
	other, ok := o.(RouteLeakingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RouteLeakingType) String() string {
	return "RouteLeakingType"
}

func (t RouteLeakingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	exportPolicyAttribute, ok := attributes["export_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`export_policy is missing from object`)

		return nil, diags
	}

	exportPolicyVal, ok := exportPolicyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`export_policy expected to be basetypes.StringValue, was: %T`, exportPolicyAttribute))
	}

	importPolicyAttribute, ok := attributes["import_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`import_policy is missing from object`)

		return nil, diags
	}

	importPolicyVal, ok := importPolicyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`import_policy expected to be basetypes.StringValue, was: %T`, importPolicyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RouteLeakingValue{
		ExportPolicy: exportPolicyVal,
		ImportPolicy: importPolicyVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewRouteLeakingValueNull() RouteLeakingValue {
	return RouteLeakingValue{
		state: attr.ValueStateNull,
	}
}

func NewRouteLeakingValueUnknown() RouteLeakingValue {
	return RouteLeakingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRouteLeakingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RouteLeakingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RouteLeakingValue Attribute Value",
				"While creating a RouteLeakingValue value, a missing attribute value was detected. "+
					"A RouteLeakingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RouteLeakingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RouteLeakingValue Attribute Type",
				"While creating a RouteLeakingValue value, an invalid attribute value was detected. "+
					"A RouteLeakingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RouteLeakingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RouteLeakingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RouteLeakingValue Attribute Value",
				"While creating a RouteLeakingValue value, an extra attribute value was detected. "+
					"A RouteLeakingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RouteLeakingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRouteLeakingValueUnknown(), diags
	}

	exportPolicyAttribute, ok := attributes["export_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`export_policy is missing from object`)

		return NewRouteLeakingValueUnknown(), diags
	}

	exportPolicyVal, ok := exportPolicyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`export_policy expected to be basetypes.StringValue, was: %T`, exportPolicyAttribute))
	}

	importPolicyAttribute, ok := attributes["import_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`import_policy is missing from object`)

		return NewRouteLeakingValueUnknown(), diags
	}

	importPolicyVal, ok := importPolicyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`import_policy expected to be basetypes.StringValue, was: %T`, importPolicyAttribute))
	}

	if diags.HasError() {
		return NewRouteLeakingValueUnknown(), diags
	}

	return RouteLeakingValue{
		ExportPolicy: exportPolicyVal,
		ImportPolicy: importPolicyVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewRouteLeakingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RouteLeakingValue {
	object, diags := NewRouteLeakingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRouteLeakingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RouteLeakingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRouteLeakingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRouteLeakingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRouteLeakingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRouteLeakingValueMust(RouteLeakingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RouteLeakingType) ValueType(ctx context.Context) attr.Value {
	return RouteLeakingValue{}
}

var _ basetypes.ObjectValuable = RouteLeakingValue{}

type RouteLeakingValue struct {
	ExportPolicy basetypes.StringValue `tfsdk:"export_policy"`
	ImportPolicy basetypes.StringValue `tfsdk:"import_policy"`
	state        attr.ValueState
}

func (v RouteLeakingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["export_policy"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["import_policy"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.ExportPolicy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["export_policy"] = val

		val, err = v.ImportPolicy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["import_policy"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RouteLeakingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RouteLeakingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RouteLeakingValue) String() string {
	return "RouteLeakingValue"
}

func (v RouteLeakingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"export_policy": basetypes.StringType{},
		"import_policy": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"export_policy": v.ExportPolicy,
			"import_policy": v.ImportPolicy,
		})

	return objVal, diags
}

func (v RouteLeakingValue) Equal(o attr.Value) bool {
	other, ok := o.(RouteLeakingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ExportPolicy.Equal(other.ExportPolicy) {
		return false
	}

	if !v.ImportPolicy.Equal(other.ImportPolicy) {
		return false
	}

	return true
}

func (v RouteLeakingValue) Type(ctx context.Context) attr.Type {
	return RouteLeakingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RouteLeakingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"export_policy": basetypes.StringType{},
		"import_policy": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	healthAttribute, ok := attributes["health"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`health is missing from object`)

		return nil, diags
	}

	healthVal, ok := healthAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`health expected to be basetypes.Int64Value, was: %T`, healthAttribute))
	}

	healthScoreReasonAttribute, ok := attributes["health_score_reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`health_score_reason is missing from object`)

		return nil, diags
	}

	healthScoreReasonVal, ok := healthScoreReasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`health_score_reason expected to be basetypes.StringValue, was: %T`, healthScoreReasonAttribute))
	}

	lastChangeAttribute, ok := attributes["last_change"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_change is missing from object`)

		return nil, diags
	}

	lastChangeVal, ok := lastChangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_change expected to be basetypes.StringValue, was: %T`, lastChangeAttribute))
	}

	operationalStateAttribute, ok := attributes["operational_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operational_state is missing from object`)

		return nil, diags
	}

	operationalStateVal, ok := operationalStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operational_state expected to be basetypes.StringValue, was: %T`, operationalStateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		Health:            healthVal,
		HealthScoreReason: healthScoreReasonVal,
		LastChange:        lastChangeVal,
		OperationalState:  operationalStateVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	healthAttribute, ok := attributes["health"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`health is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	healthVal, ok := healthAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`health expected to be basetypes.Int64Value, was: %T`, healthAttribute))
	}

	healthScoreReasonAttribute, ok := attributes["health_score_reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`health_score_reason is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	healthScoreReasonVal, ok := healthScoreReasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`health_score_reason expected to be basetypes.StringValue, was: %T`, healthScoreReasonAttribute))
	}

	lastChangeAttribute, ok := attributes["last_change"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_change is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	lastChangeVal, ok := lastChangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_change expected to be basetypes.StringValue, was: %T`, lastChangeAttribute))
	}

	operationalStateAttribute, ok := attributes["operational_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operational_state is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	operationalStateVal, ok := operationalStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operational_state expected to be basetypes.StringValue, was: %T`, operationalStateAttribute))
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		Health:            healthVal,
		HealthScoreReason: healthScoreReasonVal,
		LastChange:        lastChangeVal,
		OperationalState:  operationalStateVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	Health            basetypes.Int64Value  `tfsdk:"health"`
	HealthScoreReason basetypes.StringValue `tfsdk:"health_score_reason"`
	LastChange        basetypes.StringValue `tfsdk:"last_change"`
	OperationalState  basetypes.StringValue `tfsdk:"operational_state"`
	state             attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["health"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["health_score_reason"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_change"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["operational_state"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Health.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["health"] = val

		val, err = v.HealthScoreReason.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["health_score_reason"] = val

		val, err = v.LastChange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_change"] = val

		val, err = v.OperationalState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["operational_state"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"health":              basetypes.Int64Type{},
		"health_score_reason": basetypes.StringType{},
		"last_change":         basetypes.StringType{},
		"operational_state":   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"health":              v.Health,
			"health_score_reason": v.HealthScoreReason,
			"last_change":         v.LastChange,
			"operational_state":   v.OperationalState,
		})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Health.Equal(other.Health) {
		return false
	}

	if !v.HealthScoreReason.Equal(other.HealthScoreReason) {
		return false
	}

	if !v.LastChange.Equal(other.LastChange) {
		return false
	}

	if !v.OperationalState.Equal(other.OperationalState) {
		return false
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"health":              basetypes.Int64Type{},
		"health_score_reason": basetypes.StringType{},
		"last_change":         basetypes.StringType{},
		"operational_state":   basetypes.StringType{},
	}
}
